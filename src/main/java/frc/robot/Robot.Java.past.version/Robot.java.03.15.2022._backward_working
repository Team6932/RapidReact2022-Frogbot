// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS IS FROGBOT CODE - SMART 6932 - 2022

package frc.robot;


import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.cscore.UsbCamera;
import edu.wpi.first.cscore.VideoMode.PixelFormat;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import java.util.concurrent.TimeUnit;
//import java.util.Date; 
//import edu.wpi.first.wpilibj2.command.PrintCommand;


public class Robot extends TimedRobot {
  PWMSparkMax frontLeft = new PWMSparkMax(2);
  PWMSparkMax rearLeft = new PWMSparkMax(3);
  PWMSparkMax frontRight = new PWMSparkMax(1);
  PWMSparkMax rearRight = new PWMSparkMax(0);
  PWMSparkMax inTakeMotor = new PWMSparkMax(4);
  PWMSparkMax frontLift = new PWMSparkMax(5); //owen added
  PWMSparkMax backLift = new PWMSparkMax(6); //owen added
  PWMSparkMax shooterMotor = new PWMSparkMax(7); //owen added
  PWMSparkMax climbLeft = new PWMSparkMax(8); //owen added
  PWMSparkMax climbRight = new PWMSparkMax(9); //owen added
  

  private MecanumDrive m_robotDrive;
  private Joystick m_stick = new Joystick(2); // Driving joystick
  private Joystick s_stick = new Joystick(1); // Shooting game console

  //boolean toggleOn = false;
  boolean halfSpeedOn = false; // wyatt added
  boolean negativeSpeedOn = false; //owen added
  boolean inTakeOn = false; //owen added
  boolean LiftOn = false; //owen added
  boolean shooterOn = false; //owen added
  boolean inTakeBackwardsOn = false; //owen added
  boolean LiftBackwardsOn = false; //owen added
  boolean shooterBackwardsOn = false; //owen added
  boolean climbDownOn = false; //owen added 
  boolean climbUpOn = false; //owen added 
  double StartTime;
  


  @Override
  public void robotPeriodic() {
    
  }

  @Override
  public void robotInit() {

    // Invert the right side motors.
    // You may need to change or remove this to match your robot.
    frontRight.setInverted(true);
    rearRight.setInverted(true);

    m_robotDrive = new MecanumDrive(frontLeft, rearLeft, frontRight, rearRight);

    // Make the cameras work
    UsbCamera cam0 = CameraServer.startAutomaticCapture(0);
    UsbCamera cam1 = CameraServer.startAutomaticCapture(1);

     cam0.setResolution(160, 120);
     cam0.setFPS(20);
     cam0.setPixelFormat(PixelFormat.kMJPEG);

     cam1.setResolution(160, 120);
     cam1.setFPS(5);
     cam1.setPixelFormat(PixelFormat.kMJPEG);

    
    

  }

  @Override
  public void teleopPeriodic() {
    // Use the joystick X axis for lateral movement, Y axis for forward
    // movement, and Z axis for rotation.

    // Setting wheels for drive at half speed when button 2 on m_stick is pressed (press again to go back to main speed) and default is normal speed
    if(m_stick.getRawButton(2)){
      halfSpeedOn = true;
    } 
    else {
      halfSpeedOn = false;
    }
    
    if (halfSpeedOn){
      m_robotDrive.driveCartesian(m_stick.getX()*0.5, m_stick.getY()*0.5, m_stick.getZ()*0.5, 0.0);
    }
    else {
      m_robotDrive.driveCartesian(m_stick.getX(), m_stick.getY(), m_stick.getZ(), 0.0);
    }

    //Turn motor on (Green game console button)
    if (s_stick.getRawButtonPressed(1)) {
      inTakeOn = true;
      System.out.println(Timer.getFPGATimestamp());

    }

    if (s_stick.getRawButtonPressed(2)) {
      inTakeOn = false;
    }

    if (inTakeOn) {
      inTakeMotor.set(.3);
    }
  
    else {
      inTakeMotor.set(0);
    }

    // set negativeSpeedOn variable to true if black "back" console button held down
    if (s_stick.getRawButton(7)) {
      negativeSpeedOn = true;
    
    } 
    else {
      negativeSpeedOn = false;
    }

    // Turn motors on (blue game console button) owen added
    if (negativeSpeedOn) {
      inTakeBackwardsOn = true;
      LiftBackwardsOn = true;
      shooterBackwardsOn = true;
    } 
    else {
      inTakeBackwardsOn = false;
      LiftBackwardsOn = false;
      shooterBackwardsOn = false;
      if (s_stick.getRawButtonPressed(3)) {
        shooterOn = true;
        inTakeOn = true;
        LiftOn = true;
      }
  
      if (s_stick.getRawButtonPressed(4)) {
        LiftOn = false;
        shooterOn = false;
        inTakeOn = false;
      }
    }

    if (shooterOn) { 
      shooterMotor.set(.3);
    } 
    else if (shooterBackwardsOn) {
      shooterMotor.set(-.3);
    }
    else {
      shooterMotor.set(0);
    }
    if (inTakeOn) {
      inTakeMotor.set(.3);
    }
    else if (inTakeBackwardsOn) {
      inTakeMotor.set(-.3);
    }
    else {
      inTakeMotor.set(0);
    }

    if (LiftOn) {
      frontLift.set(-.3);
      backLift.set(-.3);
    } 
    else if (LiftBackwardsOn) {
      frontLift.set(.3);
      backLift.set(.3);
    }
    else {
      frontLift.set(0);
      backLift.set(0);
    }
    
  
  
    //Turn on motors when LB and RB held down
    if (s_stick.getRawButton(5)) {
      climbUpOn = true;
    
    } else {
      climbUpOn = false;
    }
    if (s_stick.getRawButton(6)) {
      climbDownOn = true;
    } else {
      climbDownOn = false;
    }

    if (climbUpOn) {
      climbLeft.set(.2);
      climbRight.set(.2);
    }
    else if (climbDownOn) {
      climbLeft.set(-.2);
      climbRight.set(-.2);
    }
    else {
      climbLeft.set(0);
      climbRight.set(0);
    }
  }
  

       
    

  

  

    // Add our periodic sensor readings, etc. here. 

  

  @Override
  public void autonomousPeriodic() {
    // Add out autonomous code here.
    double TimeRobot = Timer.getFPGATimestamp();
    frontRight.setInverted(true);
    rearRight.setInverted(true);
    //drive forward to ball
    if (TimeRobot - StartTime > 0 && TimeRobot - StartTime < .75) {
      m_robotDrive.driveCartesian(0, -.75, 0);      
    }
    //turn intake on to pickup ball
    if (TimeRobot - StartTime > .75 && TimeRobot - StartTime < 6 ) { 
      m_robotDrive.driveCartesian(0, 0, 0);
      inTakeMotor.set(.6);

    }
    //do a 180 once ball is picked up
    if (TimeRobot - StartTime > 1 && TimeRobot - StartTime < 4 ) {
      m_robotDrive.driveCartesian(0, 0, .4); 
    }
    //drive back towards shooting position 
    if (TimeRobot - StartTime > 4 && TimeRobot - StartTime < 4.50 ) {
      m_robotDrive.driveCartesian(0, -.75, 0);
      inTakeMotor.set(0); 
    }
    //turn on shooter motor
    if (TimeRobot - StartTime > 4.5 && TimeRobot - StartTime < 6 ) {
      shooterMotor.set(0); 
      m_robotDrive.driveCartesian(0, 0, 0);
    }
    if (TimeRobot - StartTime > 5 && TimeRobot - StartTime < 6 ) {
     shooterMotor.set(0); 
     m_robotDrive.driveCartesian(0, 0, 0);
    }
  
    


  }  


  @Override 
  public void autonomousInit() {
   StartTime = Timer.getFPGATimestamp();
  }
} // end TimedRobot
/*try { 
  Thread.sleep(1000,0);
} catch (InterruptedException e) {
  e.printStackTrace();*/
